export { LoggingFiles } from "./filewriter";
import { LoggingFiles } from "./filewriter";
import {
   LoggingBase as LoggingBaseOriginal,
   LoggingBaseOptions,
} from "@hibas123/logging";

export interface LoggingOptions extends LoggingBaseOptions {
   files:
      | boolean
      | {
           /**
            * Filename/path of the logfile. Skip if generated with name.
            *
            * If not wanted pass null
            */
           logfile?: string | null;
           /**
            * Filename/path of the logfile. Skip if generated with name.
            *
            * If not wanted pass null
            */
           errorfile?: string | null;
        };
}

export class LoggingBase extends LoggingBaseOriginal {
   constructor(config: Partial<LoggingOptions> | string = {}) {
      super(config);

      if (typeof config === "string" || config.files !== false) {
         let logfile: string;
         let errorfile: string;
         if (typeof config !== "string" && typeof config.files === "object") {
            logfile = config.files.logfile;
            errorfile = config.files.errorfile;
         }

         let name = this.name ? "." + this.name : "";
         if (!logfile && logfile !== null) logfile = `./logs/all${name}.log`;
         if (!errorfile && errorfile !== null)
            errorfile = `./logs/error${name}.log`;

         if (logfile) this.addAdapter(new LoggingFiles(logfile));

         if (errorfile) this.addAdapter(new LoggingFiles(errorfile, true));
      }
   }

   protected postGetChild(child: LoggingBase) {
      child.getCurrentTime = this.getCurrentTime.bind(child);
      child.getTimeDiff = this.getTimeDiff.bind(child);
      child.postGetChild = this.postGetChild.bind(child);
   }

   protected getCurrentTime() {
      if (process.hrtime.bigint) {
         return process.hrtime.bigint();
      } else {
         return process.hrtime();
      }
   }

   protected getTimeDiff(start) {
      if (process.hrtime.bigint) {
         return Number((process.hrtime.bigint() - start) / BigInt(1000)) / 1000;
      } else {
         let diff = process.hrtime(start);
         return diff[0] * 1000 + diff[1] / 1000000;
      }
   }
}

export let Logging: LoggingBase = undefined;
if (process.env.LOGGING_NO_DEFAULT !== "true") {
   Logging = new LoggingBase();
}
export default Logging;
