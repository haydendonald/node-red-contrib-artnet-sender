"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logging = exports.LoggingBase = void 0;
var filewriter_1 = require("./filewriter");
Object.defineProperty(exports, "LoggingFiles", { enumerable: true, get: function () { return filewriter_1.LoggingFiles; } });
const filewriter_2 = require("./filewriter");
const logging_1 = require("@hibas123/logging");
class LoggingBase extends logging_1.LoggingBase {
    constructor(config = {}) {
        super(config);
        if (typeof config === "string" || config.files !== false) {
            let logfile;
            let errorfile;
            if (typeof config !== "string" && typeof config.files === "object") {
                logfile = config.files.logfile;
                errorfile = config.files.errorfile;
            }
            let name = this.name ? "." + this.name : "";
            if (!logfile && logfile !== null)
                logfile = `./logs/all${name}.log`;
            if (!errorfile && errorfile !== null)
                errorfile = `./logs/error${name}.log`;
            if (logfile)
                this.addAdapter(new filewriter_2.LoggingFiles(logfile));
            if (errorfile)
                this.addAdapter(new filewriter_2.LoggingFiles(errorfile, true));
        }
    }
    postGetChild(child) {
        child.getCurrentTime = this.getCurrentTime.bind(child);
        child.getTimeDiff = this.getTimeDiff.bind(child);
        child.postGetChild = this.postGetChild.bind(child);
    }
    getCurrentTime() {
        if (process.hrtime.bigint) {
            return process.hrtime.bigint();
        }
        else {
            return process.hrtime();
        }
    }
    getTimeDiff(start) {
        if (process.hrtime.bigint) {
            return Number((process.hrtime.bigint() - start) / BigInt(1000)) / 1000;
        }
        else {
            let diff = process.hrtime(start);
            return diff[0] * 1000 + diff[1] / 1000000;
        }
    }
}
exports.LoggingBase = LoggingBase;
exports.Logging = undefined;
if (process.env.LOGGING_NO_DEFAULT !== "true") {
    exports.Logging = new LoggingBase();
}
exports.default = exports.Logging;
//# sourceMappingURL=index.js.map