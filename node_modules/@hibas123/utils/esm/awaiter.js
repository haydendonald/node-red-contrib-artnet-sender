import Observable from "./observable.js";
export default class AwaitStore {
    constructor(_value) {
        this._value = _value;
        this.observable = new Observable();
        this.subscribe = this.subscribe.bind(this);
        this.unsubscribe = this.unsubscribe.bind(this);
    }
    /**
     * Get the current value
     */
    get value() {
        return this._value;
    }
    /**
     * Set a new value and notify subscribers
     * @param value Value to be set
     */
    send(value) {
        this._value = value;
        this.observable.send(value);
    }
    /**
     * Get the current value as well as all changes
     * @param handler Handler called on change
     */
    subscribe(handler) {
        handler(this._value);
        return this.observable.subscribe(handler);
    }
    /**
     * Unsubscribe from changes
     * @param handler The handler to unsubscribe
     */
    unsubscribe(handler) {
        this.observable.unsubscribe(handler);
    }
    /**
     * Await a specific value and return.
     *
     * For example if val = true then this function would block until the value
     * is actually true. If it is true, then the promise will resolve immediatly
     *
     * @param val Value to await
     */
    awaitValue(val) {
        let ignore = () => undefined;
        let prms = new Promise((yes) => {
            const cb = () => {
                if (typeof val === "function") {
                    if (val(this._value)) {
                        yes();
                        this.unsubscribe(cb);
                    }
                }
                else if (this._value === val) {
                    yes();
                    this.unsubscribe(cb);
                }
            };
            this.subscribe(cb);
        });
        return {
            then: prms.then.bind(prms),
            catch: prms.catch.bind(prms),
            ignore: () => ignore(),
        };
    }
    /**
     * Creates Public API with subscribe and unsubscribe
     *
     * @returns {object}
     */
    getPublicApi() {
        if (this.observable.closed)
            throw new Error("Observable is closed!");
        return {
            subscribe: (callback) => this.subscribe(callback),
            unsubscribe: (callback) => this.unsubscribe(callback),
            awaitValue: (value) => this.awaitValue(value),
        };
    }
    /**
     * Close this store. All subscribers will be unsubscribed and any further operations will fail
     */
    close() {
        this.observable.close();
    }
}
//# sourceMappingURL=awaiter.js.map