var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Basic Locking mechanism for JavaScript
 *
 */
export default class Lock {
    constructor() {
        this._locked = false;
        this.toCome = [];
        this.release = this.release.bind(this);
    }
    /**
     * Returns the state of the Locken
     *
     * @returns {boolean}
     */
    get locked() {
        return this._locked;
    }
    /**
     * Waits till lock is free and returns a release function
     *
     * @return {function}
     */
    getLock() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._locked)
                return { release: this.lock() };
            else {
                return new Promise((resolve) => {
                    this.toCome.push(() => {
                        resolve({ release: this.lock() });
                    });
                });
            }
        });
    }
    lock() {
        this._locked = true;
        return this.release;
    }
    release() {
        return __awaiter(this, void 0, void 0, function* () {
            let next = this.toCome.shift();
            if (next) {
                next();
            }
            else {
                this._locked = false;
            }
        });
    }
}
//# sourceMappingURL=lock.js.map