import { ObserverCallback } from "./observable.js";
export declare type CheckFunction<T> = (val: T) => boolean;
export default class AwaitStore<T = any> {
    private _value;
    private observable;
    constructor(_value: T);
    /**
     * Get the current value
     */
    readonly value: T;
    /**
     * Set a new value and notify subscribers
     * @param value Value to be set
     */
    send(value: T): void;
    /**
     * Get the current value as well as all changes
     * @param handler Handler called on change
     */
    subscribe(handler: ObserverCallback<T>): () => void;
    /**
     * Unsubscribe from changes
     * @param handler The handler to unsubscribe
     */
    unsubscribe(handler: ObserverCallback<T>): void;
    /**
     * Await a specific value and return.
     *
     * For example if val = true then this function would block until the value
     * is actually true. If it is true, then the promise will resolve immediatly
     *
     * @param val Value to await
     */
    awaitValue(val: T | CheckFunction<T>): PromiseLike<void> & {
        catch: (cb: (err: any) => PromiseLike<void>) => PromiseLike<void>;
        ignore: () => void;
    };
    /**
     * Creates Public API with subscribe and unsubscribe
     *
     * @returns {object}
     */
    getPublicApi(): {
        subscribe: (callback: ObserverCallback<T>) => () => void;
        unsubscribe: (callback: ObserverCallback<T>) => void;
        awaitValue: (value: T) => PromiseLike<void> & {
            catch: (cb: (err: any) => PromiseLike<void>) => PromiseLike<void>;
            ignore: () => void;
        };
    };
    /**
     * Close this store. All subscribers will be unsubscribed and any further operations will fail
     */
    close(): void;
}
