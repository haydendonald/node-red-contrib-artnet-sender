export declare type ObserverCallbackCollect<T> = (data: T[]) => void;
export declare type ObserverCallback<T> = (data: T) => void;
export declare type ObservableInterface<T> = {
    /**
     * Subscribe to Observable
     * @param {function} callback
     */
    subscribe: (callback: ObserverCallback<T>) => void;
    /**
     * Unsubscribe fron Observable
     * @param {function} callback
     */
    unsubscribe: (callback: ObserverCallback<T>) => void;
    /**
     * Subscribe to Observable in collect mode
     * @param {function} callback
     */
    subscribeCollect: (callback: ObserverCallbackCollect<T>) => void;
};
declare const ClosedSymbol: unique symbol;
export default class Observable<T = any> {
    private collect_intervall;
    private subscriber;
    private subscriberCollect;
    private events;
    private timeout;
    private [ClosedSymbol];
    readonly closed: boolean;
    constructor(collect_intervall?: number);
    subscribe(callback: ObserverCallback<T>): () => void;
    unsubscribe(callback: ObserverCallback<T> | ObserverCallbackCollect<T>): void;
    subscribeCollect(callback: ObserverCallbackCollect<T>): void;
    /**
     * Creates Public API with subscribe and unsubscribe
     *
     * @returns {object}
     */
    getPublicApi(): ObservableInterface<T>;
    /**
     * Sends data to all subscribers
     * @param data data to be sent
     */
    send(data: T): void;
    /**
     * Closes Observable. This will remove all subscribers and mark this observable as closed.
     * You won't be able to reopen this observable. All maybe collected data will be discardet.
     */
    close(): void;
}
export {};
