import { Observable } from "@hibas123/utils";
import { Adapter, LoggingTypes, FormatConfig, Colors } from "./types.js";
export declare function removeColors(text: string): string;
export interface LoggingBaseOptions {
    /**
     * Name will be prefixed on Console output and added to logfiles, if not specified here
     */
    name: string;
    /**
     * Prints output to console
     */
    console: boolean;
    /**
     * Enables printing of calling file
     */
    resolve_filename: boolean;
}
declare class AdapterSet {
    change: Observable<{
        type: "add" | "remove";
        adapter: Adapter;
    }>;
    adapters: Set<Adapter>;
    addAdapter(adapter: Adapter): void;
}
export declare class LoggingBase {
    #private;
    private _formatMap;
    set formatMap(value: FormatConfig);
    private adapterSet;
    private adapter_init;
    private timerMap;
    private messageObservable;
    protected _name: string;
    resolve_filename: boolean;
    private _logLevel;
    get logLevel(): LoggingTypes;
    set logLevel(value: LoggingTypes);
    get name(): string;
    constructor(options?: Partial<LoggingBaseOptions> | string, adapterSet?: AdapterSet);
    /**
     * Can be used to override function from super class
     * @param child New child logging instance
     */
    protected postGetChild(child: LoggingBase): void;
    /**
     * Creates a new logging instance, with the adapters liked together.
     * @param name Name/Prefix of the new child. The actual name will resolve as "<parent-name>/<name>"
     */
    getChild(name: string): LoggingBase;
    private initAdapter;
    addAdapter(adapter: Adapter): void;
    flush(sync: true): void;
    flush(sync: false): Promise<void>;
    close(): void;
    waitForSetup(): Promise<void[]>;
    debug(...message: any[]): void;
    log(...message: any[]): void;
    warning(...message: any[]): void;
    warn(...message: any[]): void;
    error(error: Error | string, ...message: any[]): void;
    errorMessage(...message: any[]): void;
    protected getCurrentTime(): any;
    /**
     * The time difference in milliseconds (fractions allowed!)
     * @param start Start time from getCurrentTime
     */
    protected getTimeDiff(start: any): number;
    time(id?: string, name?: string): {
        id: string;
        end: () => number;
    };
    timeEnd(id: string): number;
    private message;
}
declare const colorSymbol: unique symbol;
export interface ColorFormat {
    [colorSymbol]: Colors;
    value: any;
}
export declare function withColor(color: Colors, value: any): ColorFormat;
export {};
